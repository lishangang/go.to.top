<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:p="http://www.springframework.org/schema/p" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:util="http://www.springframework.org/schema/util"
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xsi:schemaLocation="
	http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/util
    http://www.springframework.org/schema/util/spring-util.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-3.0.xsd
	http://www.springframework.org/schema/mvc
    http://www.springframework.org/schema/mvc/spring-mvc.xsd
    http://www.springframework.org/schema/aop   
    http://www.springframework.org/schema/aop/spring-aop.xsd">
	<context:annotation-config />
	<context:component-scan base-package="com.top.**.service.**, com.top.**.component.**">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>

	<!-- 执行目标方法之前调用 -->
	<bean id="adviserBefore" class="com.top.spring.aop.adviser.PrintBeforeAdviser"></bean>
	<!-- 执行目标方法之后调用 -->
	<bean id="adviserAfter" class="com.top.spring.aop.adviser.PrintAfterdviser"></bean>
	<!-- 需要织入的目标 -->
    <bean id="printTarget" class="com.top.spring.aop.test.Print"></bean>
    <bean id="print" class="org.springframework.aop.framework.ProxyFactoryBean">
    	<!-- 代理类实现的接口，如果目标类有实现行为的接口定义，则使用jdk的动态代理，
    	1如果调用的方法是目标类自定义的，则使用CGLIB代理，需要在配置文件中启动
    	2如果调用的方法是接口中定义的，即使不指定interfaces，也会使用jdk动态代理
    	3如果调用的是目标自定义的，则不管有没有实现接口，都需要显示指定CGLIB代理，否则报错
    	4只要显示指定了CGLIB，则无论如何都是用CGLIB代理
    	<property name="interfaces" value="com.top.spring.aop.test.IPrint"></property>-->
    	<property name="target" ref="printTarget"></property>
    	<!-- 启动CGLIB代理-->
    	<property name="proxyTargetClass" value="false"></property>
    	<property name="interceptorNames">
    		<list>
    			<value>adviserBefore</value>
    			<value>adviserAfter</value>
    		</list>
    	</property>
    </bean>
    
    
    <bean id="transationAdvisor" class="com.top.spring.aop.adviser.TransactionAspect"></bean>
    <bean id="userService" class="com.top.spring.aop.service.UserService"></bean>
    <aop:config>
    	<aop:aspect ref="transationAdvisor">
    		<aop:pointcut expression="execution(* com.top.spring.aop.service.UserService.*(..))" id="userPointCut"/>
    		<aop:before method="beginTransaction" pointcut-ref="userPointCut"/>
    		<aop:after method="commitTransaction" pointcut-ref="userPointCut"/>
    		<aop:after-throwing method="rollBackTransaction" pointcut-ref="userPointCut"/>
    	</aop:aspect>
    </aop:config>
    
    <!-- proxy-target-class="true" 强制使用CGLIB代理，false时，如果有接口，使用jdk动态代理，否则还是使用CGLIB代理 -->
    <!-- expose-proxy是否暴露代理，为true的话，在对象中执行AopContext.currentProxy()可获取当前对象的代理对象 -->
    <aop:aspectj-autoproxy proxy-target-class="true" expose-proxy="true"></aop:aspectj-autoproxy>
</beans>